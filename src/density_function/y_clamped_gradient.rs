use valence::prelude::BlockPos;

use crate::density_function::DensityFunction;
use crate::random::xoroshiro::XoroshiroRandom;

pub struct YClampedGradient {
    from: [i32; 2],
    to: [f64; 2],
}

impl YClampedGradient {
    pub fn new(from_y: i32, to_y: i32, from_value: f64, to_value: f64) -> eyre::Result<Box<dyn DensityFunction>> {
        Ok(Box::new(
            Self {
                from: [from_y, to_y],
                to: [from_value, to_value],
            }
        ))
    }
}

impl DensityFunction for YClampedGradient {
    fn compute(&self, pos: BlockPos) -> f64 {
        let v = i32::clamp(pos.y, self.from[0], self.from[1]) - self.from[0];
        let v = (v as f64) / ((self.from[1] - self.from[0]) as f64);
        self.to[0] + (v * (self.to[1] - self.to[0]))
    }

    fn map(&self, _: fn(&dyn DensityFunction) -> Box<dyn DensityFunction>) -> Box<dyn DensityFunction> {
        todo!()
    }

    fn min(&self) -> f64 {
        f64::min(self.to[0], self.to[1])
    }

    fn max(&self) -> f64 {
        f64::max(self.to[0], self.to[1])
    }
}

#[test]
fn y_clamped_gradient_test() {
    /*
    Java Code to generate sample

    var size = 128;
    var r = new XoroshiroRandomSource(0x786b544d6f473757L);
    var f = DensityFunctions.yClampedGradient(-64, 64, -1, 2);

    var b = new StringBuilder();
    b.append("\nlet sample = vec![");
    for (int i = 0; i < size; i++) {
        if (i > 0) b.append(", ");
        b.append(String.format("%.17f_f64", f.compute(new DensityFunction.FunctionContext() {
            @Override
            public int blockX() {
                return 0;
            }

            @Override
            public int blockY() {
                return r.nextIntBetweenInclusive(-128, 128);
            }

            @Override
            public int blockZ() {
                return 0;
            }
        })));
    }
    b.append("];\n");

    System.out.println(b.toString());
     */

    let sample = vec![1.20312500000000000_f64, -1.00000000000000000_f64, 2.00000000000000000_f64, 2.00000000000000000_f64, -1.00000000000000000_f64, 1.01562500000000000_f64, 2.00000000000000000_f64, 1.50781250000000000_f64, 2.00000000000000000_f64, 0.33593750000000000_f64, 0.73437500000000000_f64, -1.00000000000000000_f64, 2.00000000000000000_f64, -0.95312500000000000_f64, -0.76562500000000000_f64, 2.00000000000000000_f64, 0.33593750000000000_f64, 0.52343750000000000_f64, 0.52343750000000000_f64, -1.00000000000000000_f64, 2.00000000000000000_f64, 1.13281250000000000_f64, -1.00000000000000000_f64, -1.00000000000000000_f64, 1.69531250000000000_f64, 2.00000000000000000_f64, 2.00000000000000000_f64, 2.00000000000000000_f64, 0.14843750000000000_f64, 1.88281250000000000_f64, 0.03125000000000000_f64, -0.69531250000000000_f64, 2.00000000000000000_f64, 2.00000000000000000_f64, 2.00000000000000000_f64, -1.00000000000000000_f64, 2.00000000000000000_f64, 0.05468750000000000_f64, 2.00000000000000000_f64, 1.60156250000000000_f64, 2.00000000000000000_f64, 0.33593750000000000_f64, 0.80468750000000000_f64, -0.39062500000000000_f64, -0.22656250000000000_f64, 2.00000000000000000_f64, 0.19531250000000000_f64, 2.00000000000000000_f64, 2.00000000000000000_f64, -0.97656250000000000_f64, 0.52343750000000000_f64, 1.43750000000000000_f64, 0.85156250000000000_f64, -1.00000000000000000_f64, 1.53125000000000000_f64, 0.99218750000000000_f64, 2.00000000000000000_f64, 1.62500000000000000_f64, 2.00000000000000000_f64, 1.08593750000000000_f64, 2.00000000000000000_f64, -0.50781250000000000_f64, -1.00000000000000000_f64, 2.00000000000000000_f64, 2.00000000000000000_f64, -1.00000000000000000_f64, -1.00000000000000000_f64, -0.67187500000000000_f64, 2.00000000000000000_f64, 1.32031250000000000_f64, -1.00000000000000000_f64, 1.17968750000000000_f64, 0.75781250000000000_f64, 0.64062500000000000_f64, 2.00000000000000000_f64, -1.00000000000000000_f64, 2.00000000000000000_f64, 0.64062500000000000_f64, -1.00000000000000000_f64, 0.59375000000000000_f64, 0.71093750000000000_f64, 1.43750000000000000_f64, -0.46093750000000000_f64, 1.53125000000000000_f64, -0.53125000000000000_f64, 0.68750000000000000_f64, -1.00000000000000000_f64, -1.00000000000000000_f64, -1.00000000000000000_f64, 0.71093750000000000_f64, 0.33593750000000000_f64, 2.00000000000000000_f64, 2.00000000000000000_f64, -1.00000000000000000_f64, 0.05468750000000000_f64, 1.43750000000000000_f64, 1.97656250000000000_f64, -1.00000000000000000_f64, 2.00000000000000000_f64, 1.25000000000000000_f64, 1.29687500000000000_f64, -1.00000000000000000_f64, -0.08593750000000000_f64, -1.00000000000000000_f64, 0.78125000000000000_f64, -0.32031250000000000_f64, -1.00000000000000000_f64, 0.26562500000000000_f64, 1.27343750000000000_f64, -1.00000000000000000_f64, -0.95312500000000000_f64, -1.00000000000000000_f64, 1.50781250000000000_f64, 0.45312500000000000_f64, -1.00000000000000000_f64, 0.75781250000000000_f64, 2.00000000000000000_f64, -1.00000000000000000_f64, 0.45312500000000000_f64, -1.00000000000000000_f64, -0.46093750000000000_f64, 2.00000000000000000_f64, 1.88281250000000000_f64, 2.00000000000000000_f64, 2.00000000000000000_f64, 1.97656250000000000_f64, -1.00000000000000000_f64, 1.29687500000000000_f64];
    let mut r = XoroshiroRandom::new(0x786b544d6f473757_i64);
    let f = YClampedGradient::new(-64, 64, -1.0, 2.0).unwrap();

    for s in sample {
        assert_eq!(s, f.compute(BlockPos::new(0, r.next_i32_between_inclusive((-128, 128)), 0)))
    }
}